!***************************************************************
!* Program to demonstrate the Fast Fourier Transform Procedure *
!*      (frequency analysis of a discreet signal F(t))         *
!*                                                             *
!*                         F90 version by J-P Moreau, Paris    *
!*                                (www.jpmoreau.fr)            *
!* ----------------------------------------------------------- *
!* SAMPLE RUN:                                                 *
!*                                                             *
!* Input data file (tfft.dat):                                 *
!*                                                             *
!* (The test signal contains 3 frequencies: 50, 250, 500 hz)   *
!*                                                             *
!* 1024                                                        *
!* 0.00000000000000E+0000   0.00000000000000E+0000             *
!* 1.95503421309917E-0004   3.53914399999776E+0001             *
!* 3.91006842619834E-0004   5.95684899999760E+0001             *
!* 5.86510263929974E-0004   6.54621699999552E+0001             *
!* 7.82013685239669E-0004   5.24038399999845E+0001             *
!* ...                      ...                                *
!* 1.98826979472187E-0001   2.77372500000183E-0001             *
!* 1.99022482893497E-0001  -2.43361500000174E+0000             *
!* 1.99217986314807E-0001  -4.84236799999780E+0000             *
!* 1.99413489736116E-0001  -6.02247899999929E+0000             *
!* 1.99608993157426E-0001  -5.45615399999951E+0000             *
!* 1.99804496578736E-0001  -3.22824200000105E+0000             *
!* 2.00000000000045E-0001  -2.96010699999982E-0003             *
!*                                                             *
!* Output file (tfft.lst):                                     *
!*                                                             *
!*     Frequency        Value                                  *
!* ---------------------------------                           *
!*       0.00         0.271690                                 *
!*       5.00         0.546336                                 *
!*       9.99         0.555560                                 *
!*      14.99         0.572242                                 *
!*      19.98         0.598828                                 *
!*      24.98         0.640061                                 *
!*    ...             ...                                      *
!*    2522.53         0.020520                                 *
!*    2527.53         0.020518                                 *
!*    2532.52         0.020516                                 *
!*    2537.52         0.020513                                 *
!*    2542.51         0.020512                                 *
!*    2547.51         0.020511                                 *
!*    2552.50         0.020511                                 *
!*                                                             *
!***************************************************************
PROGRAM TEST_FFT

integer i,n1,ndata,ip
real*8  df,dt,f,temp,tbegin,tend

real*8  signal(1024),A(1024,2)

  !open input and output file
  OPEN(UNIT=2,FILE='tfft.lst',STATUS='UNKNOWN')	                              
  OPEN(UNIT=1,FILE='tfft.dat',STATUS='OLD')
  !read number of input signal points in input file
  read(1,*)  ndata
  !take nearest power of two
  if  (ndata > 2048) then
    ndata=2048; ip=11
  end if
  if (ndata<2048.and.ndata>1023) then
    ndata=1024; ip=10
  end if
  if (ndata<1024.and.ndata>511) then
    ndata=512; ip=9
  end if
  if (ndata<512.and.ndata>255) then
    ndata=256; ip=8
  end if
  if (ndata<256.and.ndata>127) then
    ndata=128; ip=7
  end if
  if (ndata<128.and.ndata>63) then
    ndata=64; ip=6
  end if
  if (ndata<64.and.ndata>31) then
    ndata=32; ip=5
  end if
  if  (ndata<32) then
    write(2,*) ' Error: number of points too small (<32) !'
    close(unit=2)
    print *,' Results in file tfft.lst (error).'
    stop
  end if
  !read ndata couples T(i), Y(i) in input data file
  do i=1, ndata
    read(1,*)  temp, signal(i)
    if (i.eq.1)     tbegin=temp
    if (i.eq.ndata) tend=temp
  end do
  close(unit=1)
  !Put input signal in real part of complex vector A
  do i=1, ndata
    A(i,1)=signal(i)
    A(i,2)=0.d0
  end do
  !call FFT subroutine
  call FFT(A,ip)
  !get frequencies in signal real vector
  n1=ndata / 2
  do i=1, n1
    !calculate modulus of complex number for each i value
    temp=dsqrt(A(i,1)*A(i,1)+A(i,2)*A(i,2))
    if (i>1)  temp=2.d0*temp
    signal(i)=temp
  end do
  !calculate sampling time range dt
  dt=(tend-tbegin)/(ndata-1)
  !calculate frequency step df
  df=1.d0/(ndata*dt)
  !print frequency specter to output file
  f=0.d0
  write(2,*) '    Frequency        Value       '
  write(2,*) '---------------------------------'
  do i=1, n1
    write(2,100)  f, signal(i)
    f=f+df
  end do

  close(unit=2)
  print *,' '
  print *,'Results in file tfft.lst.'
  print *,' '
  stop

100 format('   ',F8.2,'       ',F10.6)

END


SUBROUTINE FFT(A,M)
  !***************************************************************
  !*             FAST FOURIER TRANSFORM PROCEDURE                *
  !* ----------------------------------------------------------- *
  !*   This procedure calculates the fast Fourier transform of a *
  !* real function sampled in N points 0,1,....,N-1. N must be a *
  !* power of two (2 power M).                                   *
  !*  T being the sampling duration, the maximum frequency in    *
  !* the signal can't be greater than fc = 1/(2T). The resulting *
  !* specter H(k) is discreet and contains the frequencies:      *
  !*         fn = k/(NT) with k = -N/2,.. -1,0,1,2,..,N/2.       *
  !*         H(0) corresponds to null fr√©quency.                 *
  !*         H(N/2) corresponds to fc frequency.                 *
  !* ----------------------------------------------------------- *
  !* INPUTS:                                                     *
  !*                                                             *
  !*      A(i,2)  complex vector of size N, the real part of     *
  !*              which contains the N sampled points of real    *
  !*              signal to analyse (time spacing is constant).  *
  !*                                                             *
  !*          M   integer such as N=2^M                          *
  !*                                                             *
  !* OUTPUTS:                                                    *
  !*                                                             *
  !*      A(i,2)  complex vector of size N, the vector modulus   *
  !*              contain the frequencies of input signal, the   *
  !*              vector angles contain the corresponding phases *
  !*              (not used here).                               *
  !*                                                             *
  !*                                     J-P Moreau/J-P Dumont   *
  !***************************************************************
real*8  A(1024,2)
real*8  U(2),W(2),T(2)
integer N,NV2,NM1,J,I,IIP,K,L,LE,LE1
real*8  Phi,Pi
    Pi=3.1415926535
    N=2**M
    NV2=N/2
    NM1=N-1
    J=1
    DO I=1, NM1
      if (I<J) then
        T(1)=A(J,1)
	T(2)=A(J,2)
        A(J,1)=A(I,1)
	A(J,2)=A(I,2)
        A(I,1)=T(1)
	A(I,2)=T(2)
      END IF
      K=NV2
100   if (K>=J) goto 200
        J=J-K
        K=K/2
      goto 100
200   J=J+K
    END DO
    LE=1
    DO L=1, M
      LE1=LE
      LE=LE*2
      U(1)=1.d0
      U(2)=0.d0
      Phi= Pi/LE1
      W(1)=dcos(Phi)
      W(2)=dsin(Phi)
      DO J=1, LE1
        I=J-LE
300     IF (I>=N-LE) GOTO 400
          I=I+LE
          IIP=I+LE1
          T(1)=A(iip,1)*U(1)-A(iip,2)*U(2)
          T(2)=A(iip,1)*U(2)+A(iip,2)*U(1)
          A(iip,1)=A(i,1)-T(1)
          A(iip,2)=A(i,2)-T(2)
          A(i,1)=A(i,1)+T(1)
          A(i,2)=A(i,2)+T(2)
        GOTO 300
400     temp=U(1)
        U(1)=W(1)*U(1)-W(2)*U(2)
        U(2)=W(1)*U(2)+W(2)*temp
      END DO
    END DO
    DO I=1, N
      A(I,1)=A(I,1)/N
      A(I,2)=A(I,2)/N
    END DO
    RETURN
END

!End of file tfft.f90
